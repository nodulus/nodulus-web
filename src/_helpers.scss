%clearfix {
  *zoom: 1;

  &:before, &:after {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Add vendor prefixes
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

@mixin accel {
  @include prefix(transform, translate3d(0, 0, 0), 'webkit' 'ms');
}

@mixin retina() {
  @media (-webkit-min-device-pixel-ratio: 1.3),
         (min-resolution: 124dpi),
         (min-resolution: 1.3dppx) {
    @content;
  }
}

@mixin image-2x($image, $image2x, $width, $height) {
  background-image: url($image);
  @include retina {
    @include prefix(background-size, $width $height, webkit moz);
    background-image: url($image);
  }
}

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.eot');
    src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
         url($file-name + '.woff') format('woff'),
         url($file-name + '.ttf')  format('truetype'),
         url($file-name + '.svg##{$font-name}')  format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin font-size($size) {
  @if unitless($size) {
    $size: $size * 1px;
  }

  font-size: $size;
  font-size: ($size / $base-font-size) * 1rem;
}

@mixin position($type: relative, $top: null, $right: null, $bottom: null, $left: null) {
  position: $type;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin box-sizing($type) {
  @include prefix(box-sizing, $type, moz);
}

@mixin border-radius($top-left-radius, $top-right-radius: null, $bottom-right-radius: null, $bottom-left-radius: null) {
  @include prefix(border-top-left-radius, $top-left-radius, 'webkit' 'moz');
  @if $top-right-radius {
    @include prefix(border-top-right-radius, $top-right-radius, 'webkit' 'moz');
  } @else {
    @include prefix(border-top-right-radius, $top-left-radius, 'webkit' 'moz');
  }
  @if $bottom-right-radius {
    @include prefix(border-top-right-radius, $bottom-right-radius, 'webkit' 'moz');
  } @else {
    @include prefix(border-top-right-radius, $top-left-radius, 'webkit' 'moz');
  }
  @if $bottom-left-radius {
    @include prefix(border-top-right-radius, $bottom-left-radius, 'webkit' 'moz');
  } @else {
    @include prefix(border-top-right-radius, $top-left-radius, 'webkit' 'moz');
  }
}

@mixin abs-center {
  position: absolute;
  top: 50%;
  left: 50%;
  @include prefix(transform, translate(-50%, -50%), webkit ms);
}

// Prefix animation keyframes
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; }
}

@mixin transform($transformation){
  @include prefix(transform, $transformation, webkit ms);
}

@mixin transition($property: all, $time: 1s, $timing-function: ease-in-out) {
  @include prefix(transition, $property $time $timing-function, 'webkit');
}

@mixin fade($fade-from: 0, $fade-to: 1, $animate: 1s ease) {
  $name: fade- + str-replace($fade-from + '', '.', '-') + '-' + str-replace($fade-to + '', '.', '-');
  @include keyframes($name) {
    from {
      opacity: $fade-from;
    }
    to {
      opacity: $fade-to;
    }
  }
  @include prefix(animation, $name $animate, moz webkit);
}

@mixin spin($direction: clockwise, $animate: 1s infinite linear) {
  $name: spin- + $direction + '';
  @include keyframes($name) {
    0% {
      @include prefix(transform, rotate(0deg) translateZ(0), moz webkit);
    }
    100% {
      @include prefix(transform, rotate(360deg), moz webkit);
    }
  }
  @include prefix(animation, $name $animate, moz webkit);
}
