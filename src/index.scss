@import "./settings";
@import "./icons";

@import "github/tgdev/animate-sass@0.6.3/animate";

@import url(http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700);

// Index
// =====

html {
  margin: 0;
  padding: 0;
  font-family: 'Open Sans', sans-serif;
}

body {
  margin: 0;
  padding: 0;
}

a {
  color: app-color(hyper, off);
  text-decoration: none;

  &:hover {
    color: app-color(hyper, hover);
  }
}

.hold-up {
  @include span(12 of 12);

  text-align: center;
  margin: 10% 0 0 0;
  box-sizing: border-box;

  .message {
    color: #333;
    font-size: 72px;
    line-height: 72px;
    text-shadow: rgba(0, 0, 0, 0.25) 0 0 15px;
    text-transform: uppercase;
    // font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  }

  .spinner {
    margin: 6em auto;
    font-size: 10px;
    position: relative;
    text-indent: -9999em;
    border-top: 1.1em solid rgba(255, 255, 255, 0.2);
    border-right: 1.1em solid rgba(255, 255, 255, 0.2);
    border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);
    border-left: 1.1em solid #ffffff;
    -webkit-animation: load8 1.1s infinite linear;
    animation: load8 1.1s infinite linear;

    &, &:after {
      border-radius: 50%;
      width: 10em;
      height: 10em;
    }

    @-webkit-keyframes load8 {
      0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
      }
      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
      }
    }
    @keyframes load8 {
      0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
      }
      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
      }
    }
  }
}

// tgdev/animate-sass
// ------------------

$use-fadeIn: true;
$use-fadeOut: true;
$use-zoomIn: true;
$use-zoomOut: true;

body {
  -webkit-backface-visibility: hidden; // Addresses a small issue in webkit: http://bit.ly/NEdoDq
}
.animated {
  @include animate-prefixer(animation-duration, $base-duration);
  @include animate-prefixer(animation-fill-mode, both);

  &.hinge {
    @include animate-prefixer(animation-duration, $base-duration * 2);
  }
}


// TODO: (IW) figure out how to put this int _icons.scss and call it only once
// eg: @generate-icons( app-get($icons, glyphs) );

// generate an icon class for each member of $icons
@each $name, $value in app-get($icons, glyphs) {
  .icon--#{$name} {
    @extend %icon;

    &:before {
      content: quote($value);
    }
  }
}
